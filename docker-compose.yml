services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: converter
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - conversion-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d converter"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - conversion-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - conversion-network
    restart: unless-stopped

  conversion-api:
    build: ./conversion-api
    container_name: conversion-api
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - UPLOAD_DIR=/tmp/input
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=converter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/converter
      - REDIS_URL=redis://redis:6379
    volumes:
      - conversion-files:/tmp
      - ./conversion-api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy      
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - conversion-network
  outbox-processor:
    build: ./outbox-processor
    container_name: outbox-processor
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=converter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/converter
      - REDIS_URL=redis://redis:6379
      - PROCESSOR_INTERVAL=500
      - PROCESSOR_BATCH_SIZE=10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - conversion-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('net').createConnection({host: process.env.POSTGRES_HOST, port: process.env.POSTGRES_PORT}).on('connect',()=>process.exit(0)).on('error',()=>process.exit(1))"]
      interval: 10s
      timeout: 5s
      retries: 5
  light-worker-1:
    build: ./conversion-worker
    container_name: light-worker-1
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=converter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_TYPE=light
      - LIGHT_WORKERS=3

    volumes:
      - conversion-files:/tmp
    depends_on:
      postgres:
        condition: service_healthy     
      redis:
        condition: service_healthy
      conversion-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - conversion-network

  light-worker-2:
    build: ./conversion-worker
    container_name: light-worker-2
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=converter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_TYPE=light
      - LIGHT_WORKERS=3
    volumes:
      - conversion-files:/tmp
    depends_on:
      postgres:
        condition: service_healthy      
      redis:
        condition: service_healthy
      conversion-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - conversion-network


  heavy-worker-1:
    build: ./conversion-worker
    container_name: heavy-worker-1
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=converter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_TYPE=heavy
      - HEAVY_WORKERS=2  
    volumes:
      - conversion-files:/tmp
    depends_on:
      postgres:
        condition: service_healthy      
      redis:
        condition: service_healthy
      conversion-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - conversion-network
    deploy:
      resources:
        limits:
          memory: 2G 
          cpus: '1.5'

  heavy-worker-2:
    build: ./conversion-worker
    container_name: heavy-worker-2
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=converter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_TYPE=heavy
      - HEAVY_WORKERS=2
    volumes:
      - conversion-files:/tmp
    depends_on:
      postgres:
        condition: service_healthy      
      redis:
        condition: service_healthy
      conversion-api:
        condition: service_started
    restart: unless-stopped
    networks:
      - conversion-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'

volumes:
  postgres_data:
  conversion-files:

networks:
  conversion-network:
    driver: bridge